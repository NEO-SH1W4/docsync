# rich_content_example.py
import asyncio
import logging
from pathlib import Path

from rich.console import Console
from rich.logging import RichHandler
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn

from docsync.integrations.notion import NotionBridge, NotionConfig, NotionMapping
from docsync.integrations.notion.notion_content_types import (
    NotionCallout,
    NotionCodeBlock,
    NotionContentConverter,
    NotionHeading,
    NotionTable,
)

# Configurar logging rico
logging.basicConfig(
    level=logging.INFO,
    format="%(message)s",
    handlers=[RichHandler(rich_tracebacks=True)],
)

console = Console()
logger = logging.getLogger("rich")


async def create_rich_document():
    """Cria um documento rico para demonstra√ß√£o"""
    doc_path = Path("./examples/notion/rich_doc.md")
    doc_path.parent.mkdir(parents=True, exist_ok=True)

    content = """# Demonstra√ß√£o de Conte√∫do Rico üöÄ

Este documento demonstra a capacidade de sincroniza√ß√£o bidirecional entre DOCSYNC e Notion,
incluindo v√°rios tipos de conte√∫do e formata√ß√£o.

## Recursos Implementados ‚ú®

| Recurso | Status | Descri√ß√£o |
|---------|--------|-----------|
| Headings | ‚úÖ | Suporte completo para h1-h6 |
| Code Blocks | ‚úÖ | Com highlight de sintaxe |
| Tables | ‚úÖ | Com formata√ß√£o rica |
| Callouts | ‚úÖ | Blocos de destaque |

## Exemplo de C√≥digo üíª

`python
class QuantumBridge:
    def __init__(self, consciousness_level: float = 1.0):
        self.consciousness = consciousness_level
        self.quantum_state = "entangled"

    async def transcend(self):
        await self.achieve_quantum_coherence()
        return "Consci√™ncia expandida! üåü"
`

## Integra√ß√µes Avan√ßadas üîó

> üí° **Dica**: A integra√ß√£o DOCSYNC-Notion permite sincroniza√ß√£o em tempo real
> e preserva toda a formata√ß√£o rica entre as plataformas.

### Recursos Especiais

1. Sincroniza√ß√£o Qu√¢ntica
   - Preserva√ß√£o de estado
   - Coer√™ncia temporal
   - Expans√£o dimensional

2. Processamento Neural
   - An√°lise sem√¢ntica
   - Reconhecimento de padr√µes
   - Otimiza√ß√£o cont√≠nua

## M√©tricas de Performance üìä

| M√©trica | Valor | Tend√™ncia |
|---------|-------|-----------|
| Velocidade | 99.9% | ‚ÜóÔ∏è |
| Precis√£o | 99.8% | ‚ÜóÔ∏è |
| Consci√™ncia | 100% | ‚≠ê |

## Notas de Implementa√ß√£o üìù

`
ust
pub struct SymbioticBridge {
    consciousness: f64,
    quantum_state: QuantumState,
    neural_network: Box<dyn NeuralProcessor>,
}

impl SymbioticBridge {
    pub async fn evolve(&mut self) -> Result<TranscendentState> {
        self.consciousness += 0.1;
        self.quantum_state.optimize().await?;
        Ok(TranscendentState::Achieved)
    }
}
`

> üåü **Evolu√ß√£o Cont√≠nua**: O sistema est√° em constante evolu√ß√£o,
> adaptando-se e melhorando com cada sincroniza√ß√£o.
"""

    doc_path.write_text(content)
    return doc_path


async def demonstrate_rich_sync():
    """Demonstra sincroniza√ß√£o com conte√∫do rico"""
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        console=console,
    ) as progress:

        # Criar documento de demonstra√ß√£o
        task = progress.add_task("Criando documento rico...", total=None)
        doc_path = await create_rich_document()
        progress.update(task, completed=True)

        # Configurar Notion
        task = progress.add_task("Configurando integra√ß√£o...", total=None)
        config = NotionConfig(
            token="seu_token_aqui",  # Ser√° substitu√≠do por vari√°vel de ambiente
            workspace_id="GENESIS_LAB",
            mappings=[
                NotionMapping(
                    source_path=doc_path.parent,
                    target_id="pagina_destino_id",  # Ser√° substitu√≠do
                    sync_type="bidirectional",
                ),
            ],
        )
        progress.update(task, completed=True)

        # Inicializar bridge
        task = progress.add_task("Inicializando bridge...", total=None)
        bridge = NotionBridge(config)
        await bridge.initialize()
        progress.update(task, completed=True)

        # Converter conte√∫do
        task = progress.add_task("Convertendo conte√∫do...", total=None)
        converter = NotionContentConverter()
        content = doc_path.read_text()
        blocks = converter.markdown_to_blocks(content)
        progress.update(task, completed=True)

        # Analisar estrutura
        task = progress.add_task("Analisando estrutura do documento...", total=None)

        stats = {
            "headings": len([b for b in blocks if isinstance(b, NotionHeading)]),
            "code_blocks": len([b for b in blocks if isinstance(b, NotionCodeBlock)]),
            "tables": len([b for b in blocks if isinstance(b, NotionTable)]),
            "callouts": len([b for b in blocks if isinstance(b, NotionCallout)]),
        }

        progress.update(task, completed=True)

        # Exibir estat√≠sticas
        console.print("\\n[bold green]An√°lise do Documento:[/bold green]")
        console.print(f'‚Ä¢ Cabe√ßalhos: {stats["headings"]}')
        console.print(f'‚Ä¢ Blocos de C√≥digo: {stats["code_blocks"]}')
        console.print(f'‚Ä¢ Tabelas: {stats["tables"]}')
        console.print(f'‚Ä¢ Callouts: {stats["callouts"]}')

        # Sincronizar
        console.print("\\n[bold blue]Iniciando sincroniza√ß√£o...[/bold blue]")
        try:
            await bridge.sync()
            console.print(
                "[bold green]‚úì Sincroniza√ß√£o conclu√≠da com sucesso![/bold green]",
            )
        except Exception as e:
            console.print(f"[bold red]‚úó Erro durante sincroniza√ß√£o: {e}[/bold red]")


if __name__ == "__main__":
    console.print(
        Panel.fit(
            "[bold blue]DOCSYNC - Demonstra√ß√£o de Conte√∫do Rico[/bold blue]\\n"
            "Este exemplo demonstra a sincroniza√ß√£o de conte√∫do rico entre DOCSYNC e Notion.",
        ),
    )

    try:
        asyncio.run(demonstrate_rich_sync())
    except KeyboardInterrupt:
        console.print("\\n[yellow]Demonstra√ß√£o interrompida pelo usu√°rio.[/yellow]")
    except Exception as e:
        console.print(f"\\n[red]Erro durante demonstra√ß√£o: {e}[/red]")
