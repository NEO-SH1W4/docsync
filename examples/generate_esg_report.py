"""
Exemplo de gera√ß√£o de relat√≥rio ESG usando o DocSync.

Este script demonstra a gera√ß√£o de relat√≥rios ESG com:
- Dados estruturados de m√©tricas ESG
- Formata√ß√£o avan√ßada
- Feedback visual do processo
- Tratamento de erros
"""

import sys
from datetime import datetime
from pathlib import Path

from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn

from docsync.core import DocumentSynchronizer
from docsync.exceptions import DocSyncError

# Inicializa console rich para feedback visual
console = Console()


def generate_esg_data():
    """Gera dados de exemplo para o relat√≥rio ESG."""
    return {
        "metrics": [
            {
                "category": "ambiental",
                "name": "Emiss√£o de CO2",
                "value": 125.5,
                "unit": "ton",
                "target": "100 ton",
                "status": "at_risk",
                "trend": "‚ÜóÔ∏è",
            },
            {
                "category": "ambiental",
                "name": "Consumo de Energia",
                "value": 450.75,
                "unit": "kWh",
                "target": "400 kWh",
                "status": "in_progress",
                "trend": "‚û°Ô∏è",
            },
            {
                "category": "social",
                "name": "Satisfa√ß√£o dos Funcion√°rios",
                "value": 85,
                "unit": "%",
                "target": "90%",
                "status": "on_track",
                "trend": "‚ÜóÔ∏è",
            },
        ],
        "objectives": [
            {
                "title": "Redu√ß√£o de Emiss√µes",
                "description": "Reduzir emiss√µes de CO2 em 20% at√© 2024",
                "progress": 65,
                "status": "in_progress",
            },
            {
                "title": "Efici√™ncia Energ√©tica",
                "description": "Implementar medidas de economia de energia",
                "progress": 80,
                "status": "on_track",
            },
        ],
        "analysis": {
            "Impacto Ambiental": {
                "summary": "An√°lise detalhada das iniciativas ambientais.",
                "key_points": [
                    "Redu√ß√£o significativa no consumo de energia",
                    "Implementa√ß√£o de programa de reciclagem",
                ],
                "challenges": [
                    "Aumento nas emiss√µes de CO2 devido ao crescimento",
                    "Adapta√ß√£o a novas regulamenta√ß√µes",
                ],
                "opportunities": [
                    "Investimento em energia renov√°vel",
                    "Otimiza√ß√£o da cadeia log√≠stica",
                ],
            }
        },
        "recommendations": [
            {
                "title": "Otimiza√ß√£o Energ√©tica",
                "description": "Implementar sistema de monitoramento.",
                "priority": "Alta",
                "impact": "Significativo",
                "timeline": "Q2 2024",
            },
            {
                "title": "Programa de Compensa√ß√£o",
                "description": "Desenvolver programa de compensa√ß√£o de carbono.",
                "priority": "M√©dia",
                "impact": "Moderado",
                "timeline": "Q3 2024",
            },
        ],
    }


def main():
    """Fun√ß√£o principal do exemplo."""
    try:
        # Configura caminhos
        base_path = Path(__file__).parent.parent
        templates_path = base_path / "src" / "docsync" / "templates"
        output_path = base_path / "reports"
        output_path.mkdir(exist_ok=True)

        # Apresenta cabe√ßalho
        console.print(
            Panel.fit("üåø Gerador de Relat√≥rio ESG - GUARDRIVE", style="green")
        )

        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console,
        ) as progress:
            # Inicializa DocumentSynchronizer
            task = progress.add_task(
                "Inicializando Document Synchronizer...", total=None
            )
            doc_sync = DocumentSynchronizer(
                base_path=base_path, templates_path=templates_path
            )
            progress.update(task, completed=True)

            # Prepara dados
            task = progress.add_task("Preparando dados do relat√≥rio...", total=None)
            report_data = generate_esg_data()
            progress.update(task, completed=True)

            # Gera relat√≥rio
            task = progress.add_task("Gerando relat√≥rio ESG...", total=None)
            report_config = {
                "title": "Relat√≥rio ESG GUARDRIVE Q1 2024",
                "period": "Q1 2024",
                "metrics": report_data["metrics"],
                "objectives": report_data["objectives"],
                "analysis": report_data["analysis"],
                "recommendations": report_data["recommendations"],
                "overview": "Relat√≥rio trimestral de m√©tricas ESG.",
                "version": "1.0.0",
                "generated_at": datetime.now().strftime("%d/%m/%Y %H:%M"),
            }

            output_file = output_path / "esg_q1_2024.md"
            doc_sync.generate_report(
                template_name="docsync/esg_report",
                output_path=output_file,
                data=report_config,
            )
            progress.update(task, completed=True)

        # Apresenta resumo
        console.print("\n‚ú® Relat√≥rio gerado com sucesso!", style="green")
        console.print(f"\nüìù Arquivo gerado: {output_file}", style="blue")

    except DocSyncError as e:
        console.print(f"\n‚ùå Erro ao gerar relat√≥rio: {str(e)}", style="red")
        sys.exit(1)
    except Exception as e:
        console.print(f"\n‚ùå Erro inesperado: {str(e)}", style="red")
        sys.exit(1)


if __name__ == "__main__":
    main()
